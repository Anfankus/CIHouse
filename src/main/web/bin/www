#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');

const { exec } = require('child_process');
const assert=require('assert')
//TODO 调用java初始化数据库
// exec('',{timeout:2000}, (error, stdout, stderr) => {
//   if (error) {
//     console.error(`exec error: ${error}`);
//     return;
//   }
//   assert('finished',stdout);
//   console.log(`stdout: ${stdout}`);
//   console.log(`stderr: ${stderr}`);
// });

var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);

var server = http.createServer(app.callback());

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
